<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.phy.pxlibrary.dao.PXMapper">
    <!--验证登录-->
    <select id="verifyLogin" parameterType="map" resultType="map" >
        select * from px_user where (user_name = #{username}  and pass_word = #{password})
        or (mobile = #{username} and pass_word = #{password})
    </select>

    <!--注册-->
    <insert id="register" parameterType="map">
        insert into px_user (user_id,user_name,pass_word,nick_name,mobile,user_type,
        register_time,frozen_state,error_times,blog_integral,blog_fans)
        VALUES (uuid(),CONCAT('user-',#{mobile}),#{password},
        CONCAT('手机用户:',#{mobile}),#{mobile},'01',now(),'00','0','0','0')
    </insert>

    <!--获取博客列表-->
    <select id="getBlogList" parameterType="map" resultType="map">
        SELECT id,title,content_text content,u.nick_name author,author_id,
        praise_number,read_number,'' header_photo ,status,b.create_time
        from px_blog b
        INNER join px_user u on b.author_id = u.user_id
        where 1 = 1
        <if test="type != null and type != ''">
            and type = #{type}
        </if>
        <if test="authorId != null and authorId != ''">
            and author_id = #{authorId}
        </if>
    </select>

    <!--获取一条博客信息-->
    <select id="getBlogContent" resultType="map" parameterType="map">
        SELECT
        b.id,
        title,
        status,
        blog_integral,
        blog_fans,
        u.nick_name author,
        author_id,
        b.create_time,
        read_number,
        d.value personal_type,
        label,
        content_md content,
        '' header_photo,
        (select count(*) from px_blog where author_id = #{authorId}) original_number,
        (select sum(read_number) from px_blog where author_id =  #{authorId}) all_read_number,
        (select sum(praise_number) from px_blog where author_id =  #{authorId}) all_praise_number,
        <if test="id != null and id != ''">
            (select count(blog_id) from px_blog_comment where blog_id = #{id}) comment_number,
            (select count(blog_id) from px_blog_comment_reply where blog_id = #{id}) reply_number,
        </if>
        (select count(blog_id) from px_blog_comment
            where author_id = '9665202572629976') all_comment_number,
        (select count(blog_id) from px_blog_comment_reply
            where author_id = '9665202572629976') all_reply_number,
        (SELECT ranking from
					(SELECT obj_new.user_id, obj_new.blog_integral, obj_new.rownum ranking FROM
						( SELECT
            obj.user_id,
            obj.blog_integral,
            @rownum := @rownum + 1 AS num_tmp,
            @incrnum := CASE
        WHEN @rowtotal = obj.blog_integral THEN
            @incrnum
        WHEN @rowtotal := obj.blog_integral THEN
            @rownum
        END AS rownum
        FROM
            (
                SELECT
                    user_id,
                    blog_integral
                FROM
                    px_user
                ORDER BY
                    blog_integral
            ) AS obj,
            (
                SELECT
                    @rownum := 0 ,@rowtotal := NULL ,@incrnum := 0
            ) r
    ) AS obj_new) new_view where user_id = #{authorId}) ranking
        from px_blog b
        INNER join px_user u on b.author_id = u.user_id
        LEFT join px_blog_comment c on b.id = c.blog_id
        LEFT join px_blog_comment_reply r on b.id = r.blog_id
        left join px_dict d on b.personal_type = d.id
        where 1=1
        <if test="id != null and id != ''">
          and b.id = #{id}
        </if>
        limit 1
    </select>

    <!--修改个人信息-->
    <update id="modifyPersonalInfo" parameterType="map">
        UPDATE px_user
            SET
            nick_name = #{nick_name},
            real_name = #{real_name},
            sex = #{sex},
            birthday = #{birthday},
            position = #{position},
            company = #{position},
            company = #{company},
            education = #{education},
            school = #{school},
            industry = #{industry},
            start_working_time = #{start_working_time},
            brief_introduction = #{brief_introduction}
            where user_id = #{user_id}
    </update>

    <!-- 账号设置：密码，手机，邮箱 -->
    <update id="editor" parameterType="map">
        update px_user
        <if test="password != null and password != ''">
            set pass_word = #{password}
        </if>
        <if test="mobile != null and mobile != ''">
            set mobile = #{mobile}
        </if>
        <if test="email != null and email != ''">
            set mailbox = #{email}
        </if>
        where user_id = #{userId}
    </update>

    <!--获取收藏夹列表-->
    <select id="getMyCollectionList" parameterType="map" resultType="map">
        select * from px_dict where create_id = #{userId} and code = '1002'
    </select>

    <!--获取一个收藏夹的列表-->
    <select id="getOneCollectionList" parameterType="map" resultType="map">
        select * from px_collection c left join px_blog b on c.content_id = b.id
        where create_id = #{userId} and collection_type_id = #{typeId} and isdelete = '0'
    </select>

    <!--获取一个收藏夹的文章数量-->
    <select id="countOneCollection" resultType="int" parameterType="string">
        select count(*) number from px_collection where collection_type_id = #{typeId}
    </select>

    <!--添加一个收藏夹-->
    <insert id="addCollection" parameterType="map">
        insert into px_dict (id,code,value,create_id,create_time)
        VALUES (uuid(),'1002',#{name},#{userId},now())
    </insert>

    <!--根据条件查询论坛列表-->
    <select id="getForumList" parameterType="map" resultType="map">
        SELECT
        p.id,
        p.create_id,
        p.title,
        p.content,
        p.region,
        p.plate_code,
        p.type_code,
        p.label,
        p.bonus,
        p.create_time postCreatTime,
        id_settlement,
        u.nick_name,
        u.forum_score,
        (select count(*) from px_post_floor where post_id = p.id) replyNumber,
        (select count(*) from px_post_floor where post_id = p.id)*100+round(rand()*100) popularity,
        (SELECT max(create_time) FROM px_post_floor where post_id = p.id) lastTime,
        (SELECT create_id from px_post_floor WHERE post_id = p.id and create_time = (SELECT max(create_time) FROM px_post_floor where post_id = p.id)) lastReplyId,
        (select nick_name from px_user where user_id = lastReplyId) lastReplyName
        FROM `px_post` p left join px_user u on p.create_id = u.user_id
        where isdelete = '0'
        <if test="condition != null and condition != ''">
            and region = #{condition} or plate_code = #{condition}
            or type_code = #{condition} or label = #{condition}
        </if>
        <if test="text != null and text != ''">
            and title like CONCAT('%',#{text},'%')
            or content like CONCAT('%',#{text},'%')
        </if>
    </select>

    <!--根据ID查询帖子-->
    <select id="getPostContent" resultType="map" parameterType="map">
       SELECT
        *,
        '' header_photo,
	    (SELECT count(*) from px_post_floor where post_id = p.id) reply
        FROM
	    px_post p
	    LEFT JOIN px_user u ON p.create_id = u.user_id
        WHERE
	    id = #{id}
    </select>

    <!--根据ID查询帖子回帖-->
    <select id="getPostFloor" resultType="map" parameterType="map">
        SELECT
        *,
        '' header_photo
        FROM
        px_post_floor f
        LEFT JOIN px_user u ON f.create_id = u.user_id
        WHERE
        post_id = #{postId}
        order by create_time
    </select>

    <!--插入一条帖子的回帖-->
    <insert id="insertPostReply" parameterType="map">
        insert into px_post_floor (id,post_id,content,create_id,create_time)
        VALUES (uuid(),#{postId},#{content},#{replyId},now())
    </insert>

    <!--编辑一条帖子的回帖-->
    <update id="editorPostReply" parameterType="map">
        update px_post_floor set content = #{content} where id = #{id}
    </update>

    <!--删除一条帖子的回帖-->
    <delete id="deletePostReply" parameterType="map">
        delete from px_post_floor where id = #{id}
    </delete>

    <!--新增一条帖子-->
    <insert id="insertPost" parameterType="map">
        INSERT INTO px_post ( id, create_id, title, content, region, plate_code, type_code, label, bonus, create_time )
        VALUES
        ( uuid(), #{createId}, #{title}, #{content}, #{region}, #{plateCode}, #{typeCode}, #{label}, #{bonus}, now() )
    </insert>
</mapper>